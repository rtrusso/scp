;; (define (list2 . args)
;;   args)

;; (define (number->string2 z . args)
;;   (define chars "0123456789abcdef")
;;   (define (iter x result radix)
;;     (if (zero? x)
;;         (if (null? result)
;;             (list->string (list2 #\0))
;;             (list->string result))
;;         (iter (quotient x radix)
;;               (cons (string-ref chars (remainder x radix))
;;                     result)
;;               radix)))

;;   (define (inner x radix)
;;     (let ((s (iter (abs x) '() radix)))
;;       (if (negative? x)
;;           (string-append "-" s)
;;           s)))

;;   (cond ((null? args)
;;          (inner z 10))
;;         ((or (not (null? (cdr args)))
;;              (not (integer? (car args)))
;;              (case (car args)
;;                ((2 8 10 16) #f)
;;                (else #t)))
;;          (error "Invalid radix specified" args))
;;         (else
;;          (inner z (car args)))))

;; (define (display2 obj . port-list)
;;   (let* ((port (current-output-port))
;;          (disp (lambda (str)
;;                  (let loop ((index 0))
;;                    (if (< index (string-length str))
;;                        (begin (write-char (string-ref str index) port)
;;                               (loop (+ index 1)))
;;                        str)))))

;;     (define (disp-list prefix l)
;;       (cond ((pair? (cdr l))
;;              (disp prefix)
;;              (display2 (car l) port)
;;              (disp-list " " (cdr l)))
;;             ((null? (cdr l))
;;              (disp prefix)
;;              (display2 (car l) port)
;;              (disp ")"))
;;             (else
;;              (disp prefix)
;;              (display2 (car l) port)
;;              (disp " . ")
;;              (display2 (cdr l) port)
;;              (disp ")"))))
;;     (cond ((string? obj) (disp obj))
;;           ((pair? obj) (disp-list "(" obj))
;;           ((number? obj) (disp (number->string2 obj)))
;;           (else (disp "#<undisplayable>")))))

(display 3)
(newline)
(display 32)
(newline)
(display "0")
(newline)
(display '("0"))
(newline)
(display (cons "0" '()))
(newline)
(display (list "0"))
(newline)
(display (+ 1 2))
(newline)
(display (+ 1 3))
(newline)
(display (+ 1 4))
(newline)
(display '())
(newline)
(display (+ 1 5))
(newline)
(display "0")
(newline)
(display (+ 1 6))
(newline)
(display '("0"))
(newline)
(display (+ 1 7))
(newline)
(display 3)
(newline)
(display (list "0"))
(newline)
(display (+ 1 8))
(newline)
(display 3)
(newline)
(display #\3)
(newline)
(display #\0)
(newline)
(display "here")
(newline)
(display 0)
(newline)
