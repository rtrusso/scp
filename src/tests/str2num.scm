(define test-case-number 0)
(define-syntax test
  (syntax-rules ()
    ((_ expression)
     (begin (set! test-case-number (+ test-case-number 1))
            (display "case ")
            (display test-case-number)
            (display ": ")
            (newline)
            (display 'expression)
            (display " => ")
            (display expression)
            (newline)
            (newline)))))

(test (string->number "123"))
(test (string->number "-123"))
(test (string->number "1234567890"))
(test (string->number "-1234567890"))
(test (string->number "1234567890" 16))
(test (string->number "12345678" 16))
(test (string->number "-1"))
(test (string->number "1-6"))
(test (string->number "16-"))
(test (string->number "-16-"))
(test (string->number "0"))
(test (string->number "-0"))
(test (string->number "16" 10))
(test (string->number "16" 16))
(test (string->number "abCD0" 16))
(test (string->number "1a0" 16))
(test (string->number "1a0" 10))
