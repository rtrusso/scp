(define test-case-number 0)
(define-syntax test
  (syntax-rules ()
    ((_ expression)
     (begin (set! test-case-number (+ test-case-number 1))
            (display "case ")
            (display test-case-number)
            (display ": ")
            (newline)
            (write 'expression)
            (display " => ")
            (write expression)
            (newline)
            (newline)))))

(test (string<=? "asdf1" "asdf1"))
(test (string<=? "asdf1asdf" "asdf1"))
(test (string<=? "asdf1" "asdf1asdf"))
(test (string<=? "asdf" "asdf1"))
(test (string<=? "asdf1" "asdf"))
(test (string>=? "asdf1" "asdf1"))
(test (string>=? "asdf1asdf" "asdf1"))
(test (string>=? "asdf1" "asdf1asdf"))
(test (string>=? "asdf1" "asdf0"))
(test (string>=? "asdf0" "asdf1"))
(test (string-ci<? "asdf0" "ASDF1"))
(test (string-ci<? "asdf0asdf" "ASDF1"))
(test (string-ci<? "asdf0" "ASDF1asdf"))
(test (string-ci<? "asdf1asdf" "ASDF1"))
(test (string-ci<? "asdf1" "ASDF1asdf"))
(test (string-ci>? "asdf1" "AsDf0"))
