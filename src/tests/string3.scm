(define test-case-number 0)
(define-syntax test
  (syntax-rules ()
    ((_ expression)
     (begin (set! test-case-number (+ test-case-number 1))
            (display "case ")
            (display test-case-number)
            (display ": ")
            (newline)
            (write 'expression)
            (display " => ")
            (write expression)
            (newline)
            (newline)))))

(test (string-ci<=? "asdf0" "ASdf0"))
(test (string-ci<=? "asdf0asdf" "ASdf0"))
(test (string-ci<=? "asdf0" "ASdf0asdf"))
(test (string-ci<=? "asdf0" "ASdf1"))
(test (string-ci<=? "asdf1" "ASdf0"))
(test (string-ci>=? "AsDf1" "aSdF0"))
(test (string-ci>=? "AsDf1asdf" "aSdF1"))
(test (string-ci>=? "AsDf1" "aSdF1asdf"))
(test (string-ci>=? "AsDf0" "aSdF1"))
(test (substring "asdf" 2 3))
(test (string-append "asdf" "jkl"))
(test (string->list "asdf"))
(test (list->string (list #\a #\b #\c #\d)))
(test (string-copy "asdf"))
(define x (list->string (list #\a #\b #\c #\d)))
(test x)
(test (string-fill! x #\z))
(test x)
