(define test-case-number 0)
(define-syntax test
  (syntax-rules ()
    ((_ expression)
     (begin (set! test-case-number (+ test-case-number 1))
            (display "case ")
            (display test-case-number)
            (display ": ")
            (newline)
            (write 'expression)
            (display " => ")
            (write expression)
            (newline)
            (newline)))))

(test (zero? 1))
(test (zero? 0))
(test (positive? 0))
(test (positive? 1))
(test (positive? -1))
(test (negative? -33))
(test (negative? 0))
(test (negative? 1))
(test (max 1 2 6 3 4 5))
(test (apply max 3 4 '()))
(test (apply max 4 '()))
(test (min 6 5 4 7 1 8 9))
(test (apply min 3 4 '()))
(test (apply min 4 '()))
(test (abs 1))
(test (abs -1))
(test (abs 0))
(test (not 1))
(test (not #f))
(test (not #t))
(test (not "asdf"))
(test (boolean? #t))
(test (boolean? #f))
(test (boolean? boolean?))
(test (null? #f))
(test (null? (list 'a)))
(test (null? '()))
