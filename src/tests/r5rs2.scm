(define test-case-number 0)
(define-syntax test
  (syntax-rules ()
    ((_ expression)
     (begin (set! test-case-number (+ test-case-number 1))
            (display "case ")
            (display test-case-number)
            (display ": ")
            (newline)
            (write 'expression)
            (display " => ")
            (write expression)
            (newline)
            (newline)))))

(test (list? 'a))
(test (list? '(a)))
(test (list? '(a . b)))
(test (list? '(a (b c) d)))
(test (list? 3))
(test (list? (make-vector 3)))
(test (append '(a b) '(c d e)))
(test (reverse '(a b c)))
(test (list-tail '(a b c d) 2))
(test (list-ref '(a b (c d)) 2))
(test (memq 'b '(a b c)))
(test (memq '(b) '(a (b) c)))
(test (memv 'b '(a b c)))
(test (memv '(b) '(a (b) c)))
(test (member '(b) '(a (b) c)))
(test (assq 'b '((a . 1) (b . 2) (c . 3))))
(test (assv 'b '((a . 1) (b . 2) (c . 3))))
(test (assoc 'b '((a . 1) (b . 2) (c . 3))))
