(define test-case-number 0)
(define-syntax test
  (syntax-rules ()
    ((_ expression)
     (begin (set! test-case-number (+ test-case-number 1))
            (display "case ")
            (display test-case-number)
            (display ": ")
            (newline)
            (write 'expression)
            (display " => ")
            (write expression)
            (newline)
            (newline)))))

(test (equal? '(a b c) 'a))
(test (equal? '(a b c) '(a b c)))
(test (equal? '(a (b c) d) '(a (b c) d)))
(test (equal? '(a b c d) '(a (b c) d)))
(test (equal? '(a b c d) #('a 'b 'c 'd)))
(test (equal? '(a b c d e f g) '(a b c d e f)))
(test (equal? '(a b c d e f 1) '(a b c d e f #\1)))
(test (equal? 1 1))
(test (equal? 1 2))
(test (equal? 'a 1))
(test (equal? 'a 'a))
(test (equal? 1 (- 2 1)))
