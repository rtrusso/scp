(define (token-value tok)
  (car tok))

(define (token-line tok)
  (list-ref tok 1))

(define (token-column tok)
  (list-ref tok 2))

(define (token-line-col tok)
  (cdr tok))

(define (run-parse grammar terminals nonterminals sr-table goto-table action-table tokens)

  ;; @hack duplicated code here, to eliminate deps
  (define (grammar-productions grammar)
    grammar)
  (define (production-lhs prod)
    (car prod))
  (define (production-rhs prod)
    (cdr prod))

  (define (index-of obj list)
    (- (length list) (length (member obj list))))
  (define (table-ref-idx i j)
    (vector-ref (vector-ref sr-table i) j))
  (define (table-ref i j)
    (if (symbol? j)
        (table-ref-idx i (index-of j terminals))
        (table-ref-idx i j)))
  (define (goto-ref-idx i j)
    (vector-ref (vector-ref goto-table i) j))
  (define (goto-ref i j)
    (if (symbol? j)
        (goto-ref-idx i (index-of j nonterminals))
        (goto-ref-idx i j)))
  (define (get-rule idx)
    (list-ref (grammar-productions grammar) idx))
  (define (shift-stack cur-stack token cur-state value)
    (cons (list token cur-state value)
          cur-stack))
  (define (reduce-stack stack rule action)
    (let loop ((s stack)
               (args '())
               (n (length (production-rhs rule))))
      (if (zero? n)
          (list s (apply action args))
          (loop (cdr s) (cons (list-ref (car s) 2) args) (- n 1)))))
  (define (get-top-state reduced)
    (list-ref (car (get-reduced-stack reduced)) 1))
  (define (get-reduced-stack reduced)
    (list-ref reduced 0))
  (define (get-reduced-value reduced)
    (list-ref reduced 1))
  (define (parser-reject input . msg)
    (if (not (null? input))
        (let ((next (car input)))
          (for-each (lambda (x) (display x (current-error-port)))
                    (list "Parse error '"
                          (list-ref next 1)
                          "', line " 
                          (+ (list-ref next 2) 1)
                          " column " 
                          (+ (list-ref next 3) 1))))
        (for-each (lambda (x) (display x (current-error-port)))
                  (list "Parse error at end-of-file")))
    (newline (current-error-port))
    #f)
  (define (parser-accept stack)
    (list-ref (car stack) 2))
  (define (iter cur-state stack input)
    (cond
     ((null? input)
      (parser-reject input "No more tokens are available in the input, but the parser didn't reach an accept state."))
     ((not (member (caar input) terminals))
      (parser-reject input "There was an unrecognized token in the input: " (car input)))
     ((not (table-ref cur-state (caar input)))
      (parser-reject input "Syntax error; the following token is unexpected: " (car input)))
     (else 
      (let ((op (table-ref cur-state (caar input))))
        (case (car op)
          ((s) (iter (cdr op)
                     (shift-stack stack (car input) (cdr op) (cdar input))
                     (cdr input)))
          ((r) (let* ((rule (get-rule (cdr op)))
                      (action (vector-ref action-table (cdr op)))
                      (reduced (reduce-stack stack rule action))
                      (top-state (get-top-state reduced))
                      (next-state (if (goto-ref top-state (production-lhs rule))
                                      (cdr (goto-ref top-state (production-lhs rule)))
                                      (error "NO GOTO STATE " rule reduced top-state))))
                 (iter next-state
                       (shift-stack (get-reduced-stack reduced)
                                    (production-lhs rule)
                                    next-state
                                    (get-reduced-value reduced))
                       input)))
          ((a) (if (and (eqv? '$ (caar input))
                        (null? (cdr input)))
                   (parser-accept stack)
                   (parser-reject input "The input reached an accept state but was not fully consumed.")))
          (else (error "MALFORMED SR-TABLE")))))))
  (iter 0 (shift-stack '() '*non-token* 0 '*invalid-value*) tokens))

