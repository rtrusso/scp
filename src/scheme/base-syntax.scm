(define (test-exp keyword)
  (lambda (code)
    (and (pair? code) (eqv? keyword (car code)))))

(define (test-immediate? exp)
  (or (number? exp) (string? exp) (vector? exp) (char? exp)
      (eqv? exp #t) (eqv? exp #f)))

(define test-quoted? (test-exp 'quote))
(define (quoted-value exp)
  (cadr exp))

(define (test-ref? exp) (symbol? exp))

(define test-if? (test-exp 'if))
(define (if-predicate exp) (cadr exp))
(define (if-consequent exp) (caddr exp))
(define (if-antecedent exp) (cadddr exp))

(define test-begin? (test-exp 'begin))
(define (begin-sequence exp) (cdr exp))

(define test-define? (test-exp 'define))
(define (define-symbol exp)
  (if (symbol? (cadr exp))
      (cadr exp)
      (caadr exp)))
(define (define-code exp)
  (if (symbol? (cadr exp))
      (caddr exp)
      (cons 'lambda
            (cons (cdadr exp) 
                  (cddr exp)))))

(define test-let? (test-exp 'let))
(define (let->lambda exp)
  (cons (append (list 'lambda
                      (letrec-vars exp))
                (letrec-body exp))
        (letrec-exps exp)))

(define test-letrec? (test-exp 'letrec))
(define (letrec-defns exp)
  (cadr exp))
(define (letrec-vars exp)
  (map car (letrec-defns exp)))
(define (letrec-exps exp)
  (map cadr (letrec-defns exp)))
(define (letrec-body exp)
  (cddr exp))

(define (letrec->lambda-general exp unspec)
  (cons (append (list 'lambda 
                      (letrec-vars exp))
                (map
                 (lambda (var exp)
                   (list 'set! var exp))
                 (letrec-vars exp)
                 (letrec-exps exp))
                (list
                 (list (append (list 'lambda '())
                               (letrec-body exp)))))
        (map (lambda (exp) unspec)
             (letrec-vars exp))))

(define (letrec->lambda exp)
  (letrec->lambda-general exp ''*unspecified*))

(define test-set!? (test-exp 'set!))
(define (set!-symbol exp)
  (cadr exp))
(define (set!-code exp)
  (caddr exp))

(define (internal-defs->letrec orig-seq)
  (define (check-seq seq)
    (or (null? seq)
        (and (not (test-define? (car seq))) (check-seq (cdr seq)))))
  (define (write-letrec defs seq)
    (if (not (check-seq seq))
        (error "Illegal internal definition" orig-seq))
    (if (null? seq)
        (error "Sequence contains only definitions" orig-seq))
    (if (null? defs)
        `(begin ,@seq)
        `(letrec ,(map list
                       (map define-symbol defs)
                       (map define-code defs))
           (begin ,@seq))))
  (define (iter defs seq)
    (cond ((null? seq) (write-letrec defs seq))
          ((test-define? (car seq)) (iter (append defs (list (car seq)))
                                          (cdr seq)))
          (else (write-letrec defs seq))))
  (iter '() orig-seq))

(define (internal-defs->lambda-general seq unspec)
  (let ((letr (internal-defs->letrec seq)))
    (if (test-begin? letr)
        (if (= 1 (length (begin-sequence letr)))
            (car (begin-sequence letr))
            letr)
        (letrec->lambda-general letr unspec))))

(define (internal-defs->lambda seq)
  (internal-defs->lambda-general seq ''*unspecified*))

(define test-lambda? (test-exp 'lambda))
(define (lambda-args exp) (cadr exp))
(define (improper-lambda-args exp)
  (define (as-list l)
    (cond ((null? l) l)
          ((pair? l) (cons (car l) (as-list (cdr l))))
          (else (list l))))
  (as-list (lambda-args exp)))
(define (lambda-arg-names exp)
  (let ((args (lambda-args exp)))
    (if (list? args)
        args
        (improper-lambda-args exp))))
(define (lambda-code exp)
  (cddr exp))

(define (test-application? code)
  (list? code))
(define (application-op exp) (car exp))
(define (application-args exp) (cdr exp))

(define literal? test-immediate?)
(define ref? test-ref?)
(define variable? ref?)
(define quoted? test-quoted?)
(define if? test-if?)
(define begin? test-begin?)
(define define? test-define?)
(define set? test-set!?)
(define lambda? test-lambda?)
(define application? test-application?)

(define set-symbol set!-symbol)
(define set-code set!-code)

