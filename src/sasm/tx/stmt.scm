(define (sasm-assemble-statement stmt)
  (case (car stmt)
    ((function)
     (emit-whitespace)
     (assemble-instructions (append `((label ,(cadr (assoc 'name (cdr stmt))))
                                      (perform (op function-preamble)))
                                    (cdr (assoc 'body (cdr stmt))))))
    ((entry)
     (assemble-instructions `((export sasm-entry)
                              (label sasm-entry)
                              (goto (label ,(cadr stmt))))))
    ((export extern)
     (assemble-instructions (list stmt)))
    ((label data)
     (assemble-instruction stmt))
    ((global)
     (cond ((null? (cddr stmt))
            (assemble-instructions `((label ,(cadr stmt))
                                     (data (const 0)))))
           ((and (eqv? 'const (caaddr stmt))
                 (string? (cadar (cddr stmt)))
                 (null? (cdddr stmt)))
            (let ((label (cadr stmt))
                  (str (cadar (cddr stmt))))
              (assemble-instructions
               `((data (const ,(string-length str)))
                 (data (const #x8000000))
                 (label ,(cadr stmt))
                 ,@(map (lambda (c) `(data (const ,(char->integer c))))
                        (string->list str))))))
           ((all? (lambda (x) 
                    (and (pair? x)
                         (pair? (cdr x))
                         (null? (cddr x))
                         (or (and (eqv? 'const (car x))
                                  (integer? (cadr x)))
                             (and (eqv? 'label (car x))
                                  (symbol? (cadr x))))))
                  (cddr stmt))
            (assemble-instructions `((label ,(cadr stmt))
                                     ,@(map (lambda (x) `(data ,x))
                                            (cddr stmt)))))
           (else
            ;; backend-specific global form?
            (assemble-instructions (list stmt)))))
    ((define-symconst)
     (sasm-symconst-alist-append (cdr stmt)))
    ((class)
     (emit-whitespace)
     (assemble-instructions (sasm-assemble-class stmt)))
    ((class-info)
     'nothing)
    (else (error "Unable to assemble SASM statement " stmt))))
