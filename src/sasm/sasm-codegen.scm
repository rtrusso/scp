;; sasm-codegen.scm
;;
;; This module provides routines that simplify the work of generating
;; sasm code.

(define (sasm-pretty-print obj port)
  (define (helper x in-pair?)
    (cond ((and in-pair? (null? x))
           (display ")" port))
          ((and in-pair? (pair? x))
           (begin (display " " port)
                  (helper (car x) #f)
                  (helper (cdr x) #t)))
          (in-pair?
           (begin (display " . " port)
                  (helper x #f)
                  (display ")" port)))
          ((pair? x)
           (begin (display "(" port)
                  (helper (car x) #f)
                  (helper (cdr x) #t)))
          ((integer? x)
           (if (and (positive? x)
                    (> x 65535))
               (begin (display "#x" port)
                      (display (number->string x 16) port))
               (begin (write x port))))
          (else
           (write x port))))
  (cond
   ((and (pair? obj)
         (eqv? 'function (car obj)))
    (display "(function" port)
    (newline port)
    (for-each (lambda (part)
                (if (and (pair? part)
                         (not (eqv? 'body (car part))))
                    (begin (display "  " port)
                           (helper part #f)
                           (newline port))))
              obj)
    (let ((body (assoc 'body (cdr obj))))
      (if body
          (begin (display "  (body" port)
                 (newline port)
                 (for-each (lambda (insn)
                             (display "    " port)
                             (helper insn #f)
                             (newline port))
                           (cdr body))
                 (display "    ))" port)
                 (newline port))
          (begin
            (display "  )" port)
            (newline port)))))
   ((and (pair? obj)
         (eqv? 'global (car obj)))
    (display "(global " port)
    (helper (cadr obj) #f)
    (newline port)
    (for-each (lambda (elem)
                (display "        " port)
                (helper elem #f)
                (newline port))
              (cddr obj))
    (display "        )" port))
   (else
    (helper obj #f))))
