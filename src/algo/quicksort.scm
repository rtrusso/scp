(define (quicksort-vector! vector start length <=)
  (define (@ i) (vector-ref vector i))
  (define (@= i v) (vector-set! vector i v))
  (define (swap i j) 
    (let ((tmp (@ i)))
      (@= i (@ j))
      (@= j tmp)))
  (define (partition beg l r end)
    (swap (- l 1) beg)
    (recur beg (- l 1))
    (recur r end))
  (define (recur i j)
    (if (> j (+ i 1))
        (let loop ((piv (@ i)) (l (+ i 1)) (r j))
          (if (< l r)
              (if (<= (@ l) piv)
                  (loop piv (+ l 1) r)
                  (begin (swap l (- r 1))
                         (loop piv l (- r 1))))
              (partition i l r j)))))
  (recur start length))

(define (quicksort! vector <=)
  (quicksort-vector! vector 0 (vector-length vector) <=)
  vector)

(define (quicksort-list list <=)
  (vector->list (quicksort! (list->vector list) <=)))
